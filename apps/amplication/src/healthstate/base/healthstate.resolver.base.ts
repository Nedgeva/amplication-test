/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Healthstate } from "./Healthstate";
import { HealthstateCountArgs } from "./HealthstateCountArgs";
import { HealthstateFindManyArgs } from "./HealthstateFindManyArgs";
import { HealthstateFindUniqueArgs } from "./HealthstateFindUniqueArgs";
import { CreateHealthstateArgs } from "./CreateHealthstateArgs";
import { UpdateHealthstateArgs } from "./UpdateHealthstateArgs";
import { DeleteHealthstateArgs } from "./DeleteHealthstateArgs";
import { User } from "../../user/base/User";
import { HealthstateService } from "../healthstate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Healthstate)
export class HealthstateResolverBase {
  constructor(
    protected readonly service: HealthstateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Healthstate",
    action: "read",
    possession: "any",
  })
  async _healthstatesMeta(
    @graphql.Args() args: HealthstateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Healthstate])
  @nestAccessControl.UseRoles({
    resource: "Healthstate",
    action: "read",
    possession: "any",
  })
  async healthstates(
    @graphql.Args() args: HealthstateFindManyArgs
  ): Promise<Healthstate[]> {
    return this.service.healthstates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Healthstate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Healthstate",
    action: "read",
    possession: "own",
  })
  async healthstate(
    @graphql.Args() args: HealthstateFindUniqueArgs
  ): Promise<Healthstate | null> {
    const result = await this.service.healthstate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Healthstate)
  @nestAccessControl.UseRoles({
    resource: "Healthstate",
    action: "create",
    possession: "any",
  })
  async createHealthstate(
    @graphql.Args() args: CreateHealthstateArgs
  ): Promise<Healthstate> {
    return await this.service.createHealthstate({
      ...args,
      data: {
        ...args.data,

        userId: {
          connect: args.data.userId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Healthstate)
  @nestAccessControl.UseRoles({
    resource: "Healthstate",
    action: "update",
    possession: "any",
  })
  async updateHealthstate(
    @graphql.Args() args: UpdateHealthstateArgs
  ): Promise<Healthstate | null> {
    try {
      return await this.service.updateHealthstate({
        ...args,
        data: {
          ...args.data,

          userId: {
            connect: args.data.userId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Healthstate)
  @nestAccessControl.UseRoles({
    resource: "Healthstate",
    action: "delete",
    possession: "any",
  })
  async deleteHealthstate(
    @graphql.Args() args: DeleteHealthstateArgs
  ): Promise<Healthstate | null> {
    try {
      return await this.service.deleteHealthstate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "userId",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUserId(@graphql.Parent() parent: Healthstate): Promise<User | null> {
    const result = await this.service.getUserId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
